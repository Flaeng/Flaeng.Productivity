using Flaeng.Productivity.DependencyInjection;

namespace Flaeng.Productivity.Tests.DependencyInjection;

public class InterfaceGeneratorTests : TestBase
{
    [Fact]
    public void Does_generate_attribute()
    {
        // Arrange

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>();

        // Assert
        Assert.Empty(output.Diagnostic);

        var source = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("GenerateInterfaceAttribute.g.cs"));
        Assert.Equal("""
        // <auto-generated/>

        #nullable enable

        namespace Flaeng.Productivity.DependencyInjection
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            [global::System.AttributeUsageAttribute(
                global::System.AttributeTargets.Class, 
                AllowMultiple = false,
                Inherited = false)]
            internal sealed class GenerateInterfaceAttribute : global::System.Attribute
            {
                public GenerateInterfaceAttribute()
                { }
            }
        }
        """, source?.Content);
    }

    [Fact]
    public void wont_generate_source_when_no_attribute_is_provided()
    {
        // Arrange
        string source = """
        namespace TestNamespace.Providers
        {
            public partial class Dummy
            {
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<ConstructorGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        Assert.Empty(output.Diagnostic);
        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Null(dummyGenerated);
    }

    [Fact]
    public void can_make_interface_with_no_methods()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            { }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_handle_filescoped_namespaces()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers;
        [GenerateInterface]
        public partial class Dummy
        { }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_no_namespace()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        [GenerateInterface]
        public partial class Dummy
        { }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
        public interface IDummy
        {
        }
        public partial class Dummy : IDummy
        {
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_method()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                void Simple();
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_property()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Simple { get; set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_static_property()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public static string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                static string Simple { get; set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void wont_make_interface_with_single_protected_property()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                protected string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_field()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Simple;
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_static_field()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public static string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                static string Simple;
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void wont_make_interface_with_single_protected_field()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                protected string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_property_with_protected_setter()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; protected set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Simple { get; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_property_without_setter()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Simple { get; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_property_with_protected_getter()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { protected get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Simple { set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_single_property_without_modifiers()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_multiple_methods()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public void Simple() { }
                public bool Simple(int number) { return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                void Simple();
                bool Simple(
                    int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_a_method_with_an_out_parameter()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public bool Simple(ref int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                bool Simple(
                    ref int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_make_interface_with_a_method_with_a_normal_and_an_out_parameter()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void Doesnt_make_interface_for_structs()
    {
        // Arrange
        string source = """
        namespace TestNamespace.Providers
        {
            public partial class Dummy
            {
                [GenerateInterface]
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<ConstructorGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        Assert.Empty(output.Diagnostic);
        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Null(dummyGenerated);
    }

    [Fact]
    public void will_inherit_visiblity()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            internal partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            internal interface IDummy
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            internal partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_handle_nested_classes()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            public partial class Wrapper1
            {
                public partial class Wrapper2
                {
                    [GenerateInterface]
                    public partial class Dummy
                    {
                        public bool Simple(string text, out int number) { number = 0; return true; }
                    }
                }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public partial class Wrapper1
            {
                public partial class Wrapper2
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
                    public interface IDummy
                    {
                        bool Simple(
                            string text,
                            out int number
                            );
                    }
                    public partial class Dummy : IDummy
                    {
                    }
                }
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.Wrapper1.Wrapper2.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_generate_partial_interface()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            public interface IDummy 
            {
                bool Simple(string text, out int number);
            }
            [GenerateInterface]
            public partial class Dummy : IDummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
                public bool Advanced(string text) { return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy2
            {
                bool Advanced(
                    string text
                    );
            }
            public partial class Dummy : IDummy2
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact]
    public void can_generate_partial_interface_with_another_name()
    {
        // Arrange
        string source1 = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            public interface IDummyTest 
            {
                bool Simple(string text, out int number);
            }
            [GenerateInterface]
            public partial class Dummy : IDummyTest, IDummyTester
            {
                public string Header { get; }
                public string Paragraph { get; }
                public bool Simple(string text, out int number) { number = 0; return true; }
                public bool Advanced(string text) { return true; }
                public int Expert(string text, ref int number) { number = 0; return true; }
            }
        }
        """;
        string source2 = """
        namespace TestNamespace.Providers;
        
        public interface IDummyTester 
        {
            string Header { get; }
            int Expert(string text, ref int number);
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy1.cs", source1),
            new SourceFile("dummy2.cs", source2)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface IDummy
            {
                string Paragraph { get; }
                bool Advanced(
                    string text
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

    [Fact(Skip = "Not implemented yet")]
    public void can_handle_attribute_parameters()
    {
        // Arrange
        string source = """
        using Flaeng.Productivity.DependencyInjection;

        namespace TestNamespace.Providers
        {
            [GenerateInterface(TypeVisiblity.Public, "DumDum")]
            internal partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng.Productivity.DependencyInjection;

        #nullable enable

        namespace TestNamespace.Providers
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Flaeng.Productivity", "1.0.0.0")]
            public interface DumDum
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            internal partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.Wrapper1.Wrapper2.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content);
    }

}
