using Flaeng.Productivity.DependencyInjection;

namespace Flaeng.Productivity.Tests.DependencyInjection;

public class InterfaceGeneratorTests : TestBase
{

    [Fact]
    public void Does_generate_attribute()
    {
        // Arrange

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>();

        // Assert
        Assert.Empty(output.Diagnostic);

        var source = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("GenerateInterfaceAttribute.g.cs"));
        Assert.Equal("""
        // <auto-generated/>

        #nullable enable

        namespace Flaeng
        {
            [global::System.AttributeUsageAttribute(
                global::System.AttributeTargets.Class, 
                AllowMultiple = false,
                Inherited = false)]
            internal sealed class GenerateInterfaceAttribute : global::System.Attribute
            {
                public GenerateInterfaceAttribute()
                { }
            }
        }
        """, source?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void wont_generate_source_when_no_attribute_is_provided()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public partial class Dummy
            {
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<ConstructorGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        Assert.Empty(output.Diagnostic);
        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Null(dummyGenerated);
    }

    [Fact]
    public void can_make_interface_with_no_methods()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            { }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_filescoped_namespaces()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers;
        [GenerateInterface]
        public partial class Dummy
        { }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_no_namespace()
    {
        // Arrange
        string source = """
        using Flaeng;

        [GenerateInterface]
        public partial class Dummy
        { }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        public interface IDummy
        {
        }
        public partial class Dummy : IDummy
        {
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_method()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                void Simple();
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_property()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                string Simple { get; set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_static_property()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public static string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                static string Simple { get; set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void wont_make_interface_with_single_protected_property()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                protected string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }


    [Fact]
    public void can_make_interface_with_single_field()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_static_field()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public static string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                static string Simple;
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void wont_make_interface_with_single_protected_field()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                protected string Simple;
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_property_with_protected_setter()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; protected set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                string Simple { get; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_property_without_setter()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { get; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                string Simple { get; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_property_with_protected_getter()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public string Simple { protected get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                string Simple { set; }
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_single_property_without_modifiers()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                string Simple { get; set; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;

        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_multiple_methods()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public void Simple() { }
                public bool Simple(int number) { return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                void Simple();
                bool Simple(
                    int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_multiple_interfaces_when_defined_in_one_file()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public void Simple() { }
                public bool Simple(int number) { return true; }
            }
            [GenerateInterface]
            public partial class DumDum
            {
                public void Second() { }
                public bool Second(string text) { return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output1 = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                void Simple();
                bool Simple(
                    int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        string expected_output2 = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDumDum
            {
                void Second();
                bool Second(
                    string text
                    );
            }
            public partial class DumDum : IDumDum
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output1, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());

        var dumdumGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDumDum.g.cs"));
        Assert.Equal(expected_output2, dumdumGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_a_method_with_an_out_parameter()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public bool Simple(ref int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                bool Simple(
                    ref int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_make_interface_with_a_method_with_a_normal_and_an_out_parameter()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void Doesnt_make_interface_for_structs()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public partial class Dummy
            {
                [GenerateInterface]
                public void Simple() { }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<ConstructorGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        Assert.Empty(output.Diagnostic);
        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Null(dummyGenerated);
    }

    [Fact]
    public void will_inherit_visiblity()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            internal partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            internal interface IDummy
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            internal partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void will_add_inherited_methods_to_interface()
    {
        // Arrange
        string source1 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public abstract class BaseBase
            {
                public int Math(string text) { return 1; }
            }
        }
        """;
        string source2 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public abstract class DummyBase : BaseBase
            {
                public bool Simple1(string text) { return true; }
                public virtual bool Simple2(string text, out int number) { number = 0; return true; }
            }
        }
        """;
        string source3 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy : DummyBase
            {
                public override bool Simple2(string text, out int number) { number = 0; return true; }
                public override bool Simple3(string text1, string text2, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("BaseBase.cs", source1),
            new SourceFile("DummyBase.cs", source2),
            new SourceFile("Dummy.cs", source3)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                int Math(
                    string text
                    );
                bool Simple1(
                    string text
                    );
                bool Simple2(
                    string text,
                    out int number
                    );
                bool Simple3(
                    string text1,
                    string text2,
                    out int number
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void will_handle_inherited_methods_with_generic_parameter()
    {
        // Arrange
        string source1 = """
        namespace TestNamespace.Providers
        {
            public abstract class CanLogout<T>
            {
                public void Logout(T data) { ; }
            }
        }
        """;
        string source2 = """
        namespace TestNamespace.Providers
        {
            public abstract class Auth<T1, T2> : CanLogout<T1>
            {
                public T1 Login(T2 data) { ; }
            }
        }
        """;
        string source3 = """
        using Flaeng;
        
        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class Dummy : Auth<User, Login>
            {
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("canlogout.cs", source1),
            new SourceFile("auth.cs", source2),
            new SourceFile("dummy.cs", source3)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                User Login(
                    Login data
                    );
                void Logout(
                    User data
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void will_handle_generic_parameter_with_multiple_generic_types()
    {
        // Arrange
        string source = """
        using Flaeng;
        using System.Collections.Generic;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class CanDoStuff<T>
            {
                public Dictionary<string, T> DoStuff(KeyValuePair<string, T> data) { ; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("CanDoStuff.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;
        using System.Collections.Generic;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface ICanDoStuff
            {
                global::System.Collections.Generic.Dictionary<string, T> DoStuff(
                    global::System.Collections.Generic.KeyValuePair<string, T> data
                    );
            }
            public partial class CanDoStuff : ICanDoStuff
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.ICanDoStuff.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void will_handle_generic_parameter_with_nested_generic_types()
    {
        // Arrange
        string source = """
        using Flaeng;
        using System.Collections.Generic;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class CanDoStuff<T>
            {
                public Dictionary<string, IList<T>> DoStuff(KeyValuePair<string, T> data) { ; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("CanDoStuff.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;
        using System.Collections.Generic;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface ICanDoStuff
            {
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.IList<T>> DoStuff(
                    global::System.Collections.Generic.KeyValuePair<string, T> data
                    );
            }
            public partial class CanDoStuff : ICanDoStuff
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.ICanDoStuff.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_async_methods()
    {
        // Arrange
        string source = """
        using Flaeng;
        using System.Threading;
        using System.Threading.Tasks;

        namespace TestNamespace.Providers
        {
            public class User
            {
                public string Username { get; }
            }
            public class Page<T>
            {
                public List<T> Items { get; }
            }
            [GenerateInterface]
            public partial class Dummy
            {
                public async Task<Page<User>> SimpleAsync(string text, CancellationToken token) 
                { 
                    return Task.FromResult(new Page<User>()); 
                }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;
        using System.Threading;
        using System.Threading.Tasks;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                global::System.Threading.Tasks.Task<global::TestNamespace.Providers.Page<global::TestNamespace.Providers.User>> SimpleAsync(
                    string text,
                    global::System.Threading.CancellationToken token
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_nested_classes()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public partial class Wrapper1
            {
                public partial class Wrapper2
                {
                    [GenerateInterface]
                    public partial class Dummy
                    {
                        public bool Simple(string text, out int number) { number = 0; return true; }
                    }
                }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public partial class Wrapper1
            {
                public partial class Wrapper2
                {
                    public interface IDummy
                    {
                        bool Simple(
                            string text,
                            out int number
                            );
                    }
                    public partial class Dummy : IDummy
                    {
                    }
                }
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.Wrapper1.Wrapper2.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_generate_partial_interface()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public interface IDummy 
            {
                bool Simple(string text, out int number);
            }
            [GenerateInterface]
            public partial class Dummy : IDummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
                public bool Advanced(string text) { return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy2
            {
                bool Advanced(
                    string text
                    );
            }
            public partial class Dummy : IDummy2
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_generate_partial_interface_with_another_name()
    {
        // Arrange
        string source1 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public interface IDummyTest 
            {
                bool Simple(string text, out int number);
            }
            [GenerateInterface]
            public partial class Dummy : IDummyTest, IDummyTester
            {
                public string Header { get; }
                public string Paragraph { get; }
                public bool Simple(string text, out int number) { number = 0; return true; }
                public bool Advanced(string text) { return true; }
                public int Expert(string text, ref int number) { number = 0; return true; }
            }
        }
        """;
        string source2 = """
        namespace TestNamespace.Providers;
        
        public interface IDummyTester 
        {
            string Header { get; }
            int Expert(string text, ref int number);
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy1.cs", source1),
            new SourceFile("dummy2.cs", source2)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDummy
            {
                string Paragraph { get; }
                bool Advanced(
                    string text
                    );
            }
            public partial class Dummy : IDummy
            {
            }
        }

        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_multiple_files()
    {
        // Arrange
        string source1 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            public partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;
        string source2 = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface]
            public partial class DumDum : Dummy
            {
                public bool Simple(out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source1),
            new SourceFile("dumdum.cs", source2)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface IDumDum
            {
                bool Simple(
                    out int number
                    );
                bool Simple(
                    string text,
                    out int number
                    );
            }
            public partial class DumDum : IDumDum
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.IDumDum.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_default_value_default()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace;
        
        [GenerateInterface]
        public partial class Test
        {
            public async Task MainAsync(CancellationToken token = default) {}
        } 
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace
        {
            public interface ITest
            {
                Task MainAsync(
                    CancellationToken token = default
                    );
            }
            public partial class Test : ITest
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.ITest.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_default_value_int()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace;
        
        [GenerateInterface]
        public partial class Test
        {
            public async Task MainAsync(int number = 1) {}
        } 
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace
        {
            public interface ITest
            {
                Task MainAsync(
                    int number = 1
                    );
            }
            public partial class Test : ITest
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.ITest.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_default_value_string()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace;
        
        [GenerateInterface]
        public partial class Test
        {
            public async Task MainAsync(string str = "123") {}
        } 
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace
        {
            public interface ITest
            {
                Task MainAsync(
                    string str = "123"
                    );
            }
            public partial class Test : ITest
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.ITest.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact]
    public void can_handle_params()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace;
        
        [GenerateInterface]
        public partial class Test
        {
            public void Main(params string[] args) {}
        } 
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace
        {
            public interface ITest
            {
                void Main(
                    params string[] args
                    );
            }
            public partial class Test : ITest
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.ITest.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }


    [Fact(Skip = "Not implemented yet")]
    public void can_handle_public_readonly_fields()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace;
        
        [GenerateInterface]
        public partial class Test
        {
            public readonly IFileComparer fileComparer;

            public void Main() {}
        } 
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace
        {
            public interface ITest
            {
                readonly IFileComparer fileComparer;
                void Main();
            }
            public partial class Test : ITest
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.ITest.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

    [Fact(Skip = "Not implemented yet")]
    public void can_handle_attribute_parameters()
    {
        // Arrange
        string source = """
        using Flaeng;

        namespace TestNamespace.Providers
        {
            [GenerateInterface(TypeVisiblity.Public, "DumDum")]
            internal partial class Dummy
            {
                public bool Simple(string text, out int number) { number = 0; return true; }
            }
        }
        """;

        // Act
        var output = GetGeneratedOutput<InterfaceGenerator>(
            new SourceFile("dummy.cs", source)
        );

        // Assert
        string expected_output = """
        // <auto-generated/>

        using Flaeng;

        #nullable enable

        namespace TestNamespace.Providers
        {
            public interface DumDum
            {
                bool Simple(
                    string text,
                    out int number
                    );
            }
            internal partial class Dummy : IDummy
            {
            }
        }
        
        """;
        Assert.Empty(output.Diagnostic);

        var dummyGenerated = output.GeneratedFiles
            .SingleOrDefault(x => x.Filename.EndsWith("TestNamespace.Providers.Wrapper1.Wrapper2.IDummy.g.cs"));
        Assert.Equal(expected_output, dummyGenerated?.Content?.WithoutGeneratedCodeAttribute());
    }

}
