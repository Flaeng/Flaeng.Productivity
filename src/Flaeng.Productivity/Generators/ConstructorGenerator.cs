namespace Flaeng.Productivity.Generators;

[Generator(LanguageNames.CSharp)]
public sealed partial class ConstructorGenerator : GeneratorBase
{
    public override void Initialize(IncrementalGeneratorInitializationContext context)
    {
        Initialize(context, GenerateTriggerAttribute, Predicate, Transform, ConstructorDataEqualityComparer.Instance, Execute);
    }

    public static bool Predicate(SyntaxNode node, CancellationToken ct)
    {
        if (node is not ClassDeclarationSyntax { Members.Count: > 0 } cds)
            return false;

        return cds.Members.Any(HasTriggerAttribute);
    }

    private static bool HasTriggerAttribute(MemberDeclarationSyntax syntax)
    {
        return HasAttribute(syntax, "Inject");
    }

    private static void GenerateTriggerAttribute(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource("InjectAttribute.g.cs", SourceText.From($$"""
        // <auto-generated/>

        #nullable enable

        namespace Flaeng
        {
            [global::System.AttributeUsageAttribute(
                global::System.AttributeTargets.Property | global::System.AttributeTargets.Field, 
                AllowMultiple = false, 
                Inherited = false)]
            {{Constants.GeneratedCodeAttribute}}
            internal sealed class InjectAttribute : global::System.Attribute
            {
            }
        }
        """, Encoding.UTF8));
    }
}
