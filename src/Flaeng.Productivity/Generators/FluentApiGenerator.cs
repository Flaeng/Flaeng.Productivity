namespace Flaeng.Productivity.Generators;

[Generator(LanguageNames.CSharp)]
public sealed partial class FluentApiGenerator : GeneratorBase
{
    public override void Initialize(IncrementalGeneratorInitializationContext context)
    {
        Initialize(context, GenerateTriggerAttribute, Predicate, Transform, FluentApiDataEqualityComparer.Instance, Execute);
    }

    private static bool Predicate(SyntaxNode node, CancellationToken token)
    {
        return node is ClassDeclarationSyntax { AttributeLists.Count: > 0 } cds && HasTriggerAttribute(cds)
            || node is PropertyDeclarationSyntax { AttributeLists.Count: > 0 } pds && HasTriggerAttribute(pds)
            || node is FieldDeclarationSyntax { AttributeLists.Count: > 0 } fds && HasTriggerAttribute(fds);
    }

    private static bool HasTriggerAttribute(MemberDeclarationSyntax syntax) => HasAttribute(syntax, "MakeFluent");

    private static void GenerateTriggerAttribute(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource("MakeFluentAttribute.g.cs", SourceText.From($$"""
        // <auto-generated/>

        #nullable enable

        namespace Flaeng
        {
            [global::System.AttributeUsageAttribute(
                global::System.AttributeTargets.Class | global::System.AttributeTargets.Field | global::System.AttributeTargets.Property,
                AllowMultiple = false,
                Inherited = false)]
            {{Constants.GeneratedCodeAttribute}}
            internal sealed class MakeFluentAttribute : global::System.Attribute
            { }
        }
        """, Encoding.UTF8));
    }
}
